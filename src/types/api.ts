/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/sessions": {
    /** List all sessions */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Session"][];
          };
        };
      };
    };
    /** Create a new session */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
      };
    };
  };
  "/sessions/{id}": {
    /** Get session by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
      };
    };
    /** Update session by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
      };
    };
    /** Delete session by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/campers": {
    /** List all campers */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"][];
          };
        };
      };
    };
    /** Create a new camper */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CamperCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"];
          };
        };
      };
    };
  };
  "/campers/{id}": {
    /** Get camper by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"];
          };
        };
      };
    };
    /** Update camper */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CamperUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"];
          };
        };
      };
    };
    /** Delete camper */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/staff-members": {
    /** List all staff members */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"][];
          };
        };
      };
    };
    /** Create a new staff member */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["StaffMemberCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"];
          };
        };
      };
    };
  };
  "/staff-members/{id}": {
    /** Get staff member by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"];
          };
        };
      };
    };
    /** Update staff member by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StaffMemberUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"];
          };
        };
      };
    };
    /** Delete staff member by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/areas": {
    /** List all areas */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Area"][];
          };
        };
      };
    };
    /** Create a new area */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AreaCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Area"];
          };
        };
      };
    };
  };
  "/areas/{id}": {
    /** Get area by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Area"];
          };
        };
      };
    };
    /** Update area */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AreaUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Area"];
          };
        };
      };
    };
    /** Delete area */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/locations": {
    /** List all locations */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"][];
          };
        };
      };
    };
    /** Create a new location */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LocationCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
    };
  };
  "/locations/{id}": {
    /** Get location by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
    };
    /** Update location by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LocationUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
    };
    /** Delete location by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/programs": {
    /** List all programs */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Program"][];
          };
        };
      };
    };
    /** Create a new program */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProgramCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Program"];
          };
        };
      };
    };
  };
  "/programs/{id}": {
    /** Get program by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Program"];
          };
        };
      };
    };
    /** Update program by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProgramUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Program"];
          };
        };
      };
    };
    /** Delete program by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/activities": {
    /** List all activities */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Activity"][];
          };
        };
      };
    };
    /** Create a new activity */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ActivityCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Activity"];
          };
        };
      };
    };
  };
  "/activities/{id}": {
    /** Get activity by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Activity"];
          };
        };
      };
    };
    /** Update activity by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ActivityUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Activity"];
          };
        };
      };
    };
    /** Delete activity by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/colors": {
    /** List all colors */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Color"][];
          };
        };
      };
    };
    /** Create a new color */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ColorCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Color"];
          };
        };
      };
    };
  };
  "/colors/{id}": {
    /** Get color by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Color"];
          };
        };
      };
    };
    /** Update color by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ColorUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Color"];
          };
        };
      };
    };
    /** Delete color by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/roles": {
    /** List all roles */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Role"][];
          };
        };
      };
    };
    /** Create a new role */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Role"];
          };
        };
      };
    };
  };
  "/roles/{id}": {
    /** Get role by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Role"];
          };
        };
      };
    };
    /** Update role by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Role"];
          };
        };
      };
    };
    /** Delete role by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/certifications": {
    /** List all certifications */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Certification"][];
          };
        };
      };
    };
    /** Create a new certification */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CertificationCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Certification"];
          };
        };
      };
    };
  };
  "/certifications/{id}": {
    /** Get certification by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Certification"];
          };
        };
      };
    };
    /** Update certification by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CertificationUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Certification"];
          };
        };
      };
    };
    /** Delete certification by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/housing-rooms": {
    /** List all housing rooms */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HousingRoom"][];
          };
        };
      };
    };
    /** Create a new housing room */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["HousingRoomCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HousingRoom"];
          };
        };
      };
    };
  };
  "/housing-rooms/{id}": {
    /** Get housing room by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HousingRoom"];
          };
        };
      };
    };
    /** Update housing room */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["HousingRoomUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HousingRoom"];
          };
        };
      };
    };
    /** Delete housing room by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/groups": {
    /** List all groups */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Group"][];
          };
        };
      };
    };
    /** Create a new group */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["GroupCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Group"];
          };
        };
      };
    };
  };
  "/groups/{id}": {
    /** Get group by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Group"];
          };
        };
      };
    };
    /** Update group by ID */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["GroupUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Group"];
          };
        };
      };
    };
    /** Delete group by ID */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/events": {
    /** List all events */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"][];
          };
        };
      };
    };
    /** Create a new event */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EventCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
      };
    };
  };
  "/events/{id}": {
    /** Get event by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
      };
    };
    /** Update event */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EventUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
      };
    };
    /** Delete event */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Camper: {
      /** Format: uuid */
      id: string;
      firstName: string;
      lastName: string;
      age: number;
      /** @enum {string} */
      gender: "male" | "female";
      parentContact: string;
      allergies?: string[];
      medicalNotes?: string;
      photoUrl?: string;
      /** Format: date-time */
      registrationDate?: string;
      /**
       * Format: uuid
       * @description ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
       */
      housingRoomId?: string;
      /**
       * Format: uuid
       * @description ID of the family group this camper belongs to
       */
      familyGroupId?: string;
      /**
       * Format: uuid
       * @description ID of the camp session this camper is registered for
       */
      sessionId?: string;
    };
    CamperCreationRequest: {
      firstName: string;
      lastName: string;
      age: number;
      /** @enum {string} */
      gender: "male" | "female";
      parentContact: string;
      /**
       * Format: uuid
       * @description ID of the camp session this camper is registered in
       */
      sessionId: string;
      allergies?: string[];
      medicalNotes?: string;
      photoUrl?: string;
      /** Format: date-time */
      registrationDate?: string;
      /**
       * Format: uuid
       * @description ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
       */
      housingRoomId?: string;
      /**
       * Format: uuid
       * @description ID of the family group this camper belongs to
       */
      familyGroupId?: string;
    };
    CamperUpdateRequest: {
      firstName: string;
      lastName: string;
      age: number;
      /** @enum {string} */
      gender: "male" | "female";
      parentContact: string;
      /**
       * Format: uuid
       * @description ID of the camp session this camper is registered in
       */
      sessionId: string;
      allergies?: string[];
      medicalNotes?: string;
      photoUrl?: string;
      /** Format: date-time */
      registrationDate?: string;
      /**
       * Format: uuid
       * @description ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
       */
      housingRoomId?: string;
      /**
       * Format: uuid
       * @description ID of the family group this camper belongs to
       */
      familyGroupId?: string;
    };
    StaffMember: {
      /** Format: uuid */
      id: string;
      firstName: string;
      lastName: string;
      /**
       * Format: uuid
       * @description ID of the role this staff member has
       */
      roleId: string;
      /** Format: email */
      email?: string;
      phone?: string;
      /** @description IDs of certifications this staff member holds */
      certificationIds?: string[];
      photoUrl?: string;
      /**
       * Format: uuid
       * @description ID of the staff member who manages this person
       */
      managerId?: string;
    };
    StaffMemberCreationRequest: {
      firstName: string;
      lastName: string;
      /**
       * Format: uuid
       * @description ID of the role this staff member has
       */
      roleId: string;
      /** Format: email */
      email?: string;
      phone?: string;
      /** @description IDs of certifications this staff member holds */
      certificationIds?: string[];
      photoUrl?: string;
      /**
       * Format: uuid
       * @description ID of the staff member who manages this person
       */
      managerId?: string;
    };
    StaffMemberUpdateRequest: {
      firstName: string;
      lastName: string;
      /**
       * Format: uuid
       * @description ID of the role this staff member has
       */
      roleId: string;
      /** Format: email */
      email?: string;
      phone?: string;
      /** @description IDs of certifications this staff member holds */
      certificationIds?: string[];
      photoUrl?: string;
      /**
       * Format: uuid
       * @description ID of the staff member who manages this person
       */
      managerId?: string;
    };
    Role: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RoleCreationRequest: {
      name: string;
      description?: string;
    };
    RoleUpdateRequest: {
      name: string;
      description?: string;
    };
    Area: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** @enum {string} */
      type?: "indoor" | "outdoor" | "facility" | "field" | "water" | "other";
      capacity?: number;
      equipment?: string[];
      notes?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    AreaCreationRequest: {
      name: string;
      description?: string;
      /** @enum {string} */
      type?: "indoor" | "outdoor" | "facility" | "field" | "water" | "other";
      capacity?: number;
      equipment?: string[];
      notes?: string;
    };
    AreaUpdateRequest: {
      name: string;
      description?: string;
      /** @enum {string} */
      type?: "indoor" | "outdoor" | "facility" | "field" | "water" | "other";
      capacity?: number;
      equipment?: string[];
      notes?: string;
    };
    Location: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @enum {string} */
      type: "classroom" | "activity" | "sports" | "dining" | "outdoor" | "arts";
      capacity?: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this location is situated
       */
      areaId?: string;
      equipment?: string[];
      notes?: string;
    };
    LocationCreationRequest: {
      name: string;
      /** @enum {string} */
      type: "classroom" | "activity" | "sports" | "dining" | "outdoor" | "arts";
      capacity?: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this location is situated
       */
      areaId?: string;
      equipment?: string[];
      notes?: string;
    };
    LocationUpdateRequest: {
      name: string;
      /** @enum {string} */
      type: "classroom" | "activity" | "sports" | "dining" | "outdoor" | "arts";
      capacity?: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this location is situated
       */
      areaId?: string;
      equipment?: string[];
      notes?: string;
    };
    Program: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      /** @description Activities belonging to this program */
      activityIds?: string[];
      /** @description Staff members associated with this program */
      staffMemberIds?: string[];
      /** @description Locations associated with this program */
      locationIds?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ProgramCreationRequest: {
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      /** @description Activities belonging to this program */
      activityIds?: string[];
      /** @description Staff members associated with this program */
      staffMemberIds?: string[];
      /** @description Locations associated with this program */
      locationIds?: string[];
    };
    ProgramUpdateRequest: {
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      /** @description Activities belonging to this program */
      activityIds?: string[];
      /** @description Staff members associated with this program */
      staffMemberIds?: string[];
      /** @description Locations associated with this program */
      locationIds?: string[];
    };
    Activity: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @description IDs of programs this activity belongs to */
      programIds: string[];
      description?: string;
      /** @description Default duration in minutes */
      duration?: number;
      /**
       * Format: uuid
       * @description ID of the default location
       */
      defaultLocationId?: string;
      /** @description IDs of required staff certifications */
      requiredCertificationIds?: string[];
      /** @description Minimum number of staff required */
      minStaff?: number;
      /** @description Default activity capacity */
      defaultCapacity?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ActivityCreationRequest: {
      name: string;
      /** @description IDs of programs this activity belongs to */
      programIds: string[];
      description?: string;
      /** @description Default duration in minutes */
      duration?: number;
      /**
       * Format: uuid
       * @description ID of the default location
       */
      defaultLocationId?: string;
      /** @description IDs of required staff certifications */
      requiredCertificationIds?: string[];
      /** @description Minimum number of staff required */
      minStaff?: number;
      /** @description Default activity capacity */
      defaultCapacity?: number;
    };
    ActivityUpdateRequest: {
      name: string;
      /** @description IDs of programs this activity belongs to */
      programIds: string[];
      description?: string;
      /** @description Default duration in minutes */
      duration?: number;
      /**
       * Format: uuid
       * @description ID of the default location
       */
      defaultLocationId?: string;
      /** @description IDs of required staff certifications */
      requiredCertificationIds?: string[];
      /** @description Minimum number of staff required */
      minStaff?: number;
      /** @description Default activity capacity */
      defaultCapacity?: number;
    };
    Color: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @description Hex color value (e.g., "#FF5733") */
      hexValue: string;
      /** @description Whether this is the default color for events */
      default?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ColorCreationRequest: {
      name: string;
      /** @description Hex color value (e.g., "#FF5733") */
      hexValue: string;
      /** @description Whether this is the default color for events */
      default?: boolean;
    };
    ColorUpdateRequest: {
      name: string;
      /** @description Hex color value (e.g., "#FF5733") */
      hexValue: string;
      /** @description Whether this is the default color for events */
      default?: boolean;
    };
    Certification: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** @description How long the certification is valid for */
      validityPeriodMonths?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CertificationCreationRequest: {
      name: string;
      description?: string;
      /** @description How long the certification is valid for */
      validityPeriodMonths?: number;
    };
    CertificationUpdateRequest: {
      name: string;
      description?: string;
      /** @description How long the certification is valid for */
      validityPeriodMonths?: number;
    };
    HousingRoom: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @description Number of beds in this housing room */
      beds: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this housing room is located
       */
      areaId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    HousingRoomCreationRequest: {
      name: string;
      /** @description Number of beds in this housing room */
      beds: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this housing room is located
       */
      areaId?: string;
    };
    HousingRoomUpdateRequest: {
      name: string;
      /** @description Number of beds in this housing room */
      beds: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this housing room is located
       */
      areaId?: string;
    };
    Session: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date */
      startDate: string;
      /** Format: date */
      endDate: string;
      description?: string;
      /** @description Optional max capacity for this session */
      maxCampers?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    SessionCreationRequest: {
      name: string;
      /** Format: date */
      startDate: string;
      /** Format: date */
      endDate: string;
      description?: string;
      /** @description Optional max capacity for this session */
      maxCampers?: number;
    };
    SessionUpdateRequest: {
      name: string;
      /** Format: date */
      startDate: string;
      /** Format: date */
      endDate: string;
      description?: string;
      /** @description Optional max capacity for this session */
      maxCampers?: number;
    };
    Group: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /**
       * Format: uuid
       * @description Optional session this group belongs to
       */
      sessionId?: string;
      /**
       * Format: uuid
       * @description Optional housing room assignment for this group
       */
      housingRoomId?: string;
      /** @description Filter criteria to automatically match campers */
      camperFilters?: {
        ageMin?: number;
        ageMax?: number;
        /** @enum {string} */
        gender?: "male" | "female";
        hasAllergies?: boolean;
        /**
         * Format: uuid
         * @description Filter by specific session
         */
        sessionId?: string;
        /** @description Filter by specific family groups */
        familyGroupIds?: string[];
      };
      /** @description Manually selected camper IDs (mutually exclusive with camperFilters) */
      camperIds?: string[];
      /** @description Filter criteria to automatically match staff members */
      staffFilters?: {
        /** @description Filter by staff roles */
        roles?: string[];
        /** @description Filter by certifications */
        certificationIds?: string[];
      };
      /** @description Manually selected staff IDs (mutually exclusive with staffFilters) */
      staffIds?: string[];
      /** @description Child group IDs for creating groups of groups */
      groupIds?: string[];
      /** @description IDs of labels assigned to this group */
      labelIds?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    GroupCreationRequest: {
      name: string;
      description?: string;
      /**
       * Format: uuid
       * @description Optional session this group belongs to
       */
      sessionId?: string;
      /**
       * Format: uuid
       * @description Optional housing room assignment for this group
       */
      housingRoomId?: string;
      /** @description Filter criteria to automatically match campers */
      camperFilters?: {
        ageMin?: number;
        ageMax?: number;
        /** @enum {string} */
        gender?: "male" | "female";
        hasAllergies?: boolean;
        /**
         * Format: uuid
         * @description Filter by specific session
         */
        sessionId?: string;
        /** @description Filter by specific family groups */
        familyGroupIds?: string[];
      };
      /** @description Manually selected camper IDs (mutually exclusive with camperFilters) */
      camperIds?: string[];
      /** @description Filter criteria to automatically match staff members */
      staffFilters?: {
        /** @description Filter by staff roles */
        roles?: string[];
        /** @description Filter by certifications */
        certificationIds?: string[];
      };
      /** @description Manually selected staff IDs (mutually exclusive with staffFilters) */
      staffIds?: string[];
      /** @description Child group IDs for creating groups of groups */
      groupIds?: string[];
      /** @description IDs of labels assigned to this group */
      labelIds?: string[];
    };
    GroupUpdateRequest: {
      name: string;
      description?: string;
      /**
       * Format: uuid
       * @description Optional session this group belongs to
       */
      sessionId?: string;
      /**
       * Format: uuid
       * @description Optional housing room assignment for this group
       */
      housingRoomId?: string;
      /** @description Filter criteria to automatically match campers */
      camperFilters?: {
        ageMin?: number;
        ageMax?: number;
        /** @enum {string} */
        gender?: "male" | "female";
        hasAllergies?: boolean;
        /**
         * Format: uuid
         * @description Filter by specific session
         */
        sessionId?: string;
        /** @description Filter by specific family groups */
        familyGroupIds?: string[];
      };
      /** @description Manually selected camper IDs (mutually exclusive with camperFilters) */
      camperIds?: string[];
      /** @description Filter criteria to automatically match staff members */
      staffFilters?: {
        /** @description Filter by staff roles */
        roles?: string[];
        /** @description Filter by certifications */
        certificationIds?: string[];
      };
      /** @description Manually selected staff IDs (mutually exclusive with staffFilters) */
      staffIds?: string[];
      /** @description Child group IDs for creating groups of groups */
      groupIds?: string[];
      /** @description IDs of labels assigned to this group */
      labelIds?: string[];
    };
    Event: {
      /** Format: uuid */
      id: string;
      title: string;
      description?: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      /** Format: uuid */
      locationId?: string;
      capacity?: number;
      /** @description IDs of groups assigned to this event */
      groupIds?: string[];
      /** @description IDs of staff members to exclude from assigned groups */
      excludeStaffIds?: string[];
      /** @description IDs of campers to exclude from assigned groups */
      excludeCamperIds?: string[];
      /** @description IDs of certifications required for this event */
      requiredCertificationIds?: string[];
      /** Format: uuid */
      colorId?: string;
      /** Format: uuid */
      programId?: string;
      /** Format: uuid */
      activityId?: string;
      /**
       * Format: uuid
       * @description Recurrence rule ID - links this event to a recurrence series
       */
      recurrenceId?: string;
      /** @description Indicates if this is the parent event of a recurrence series */
      isRecurrenceParent?: boolean;
    };
    EventCreationRequest: {
      title: string;
      description?: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      /** Format: uuid */
      locationId?: string;
      capacity?: number;
      /** @description IDs of groups assigned to this event */
      groupIds?: string[];
      /** @description IDs of staff members to exclude from assigned groups */
      excludeStaffIds?: string[];
      /** @description IDs of campers to exclude from assigned groups */
      excludeCamperIds?: string[];
      /** @description IDs of certifications required for this event */
      requiredCertificationIds?: string[];
      /** Format: uuid */
      colorId?: string;
      /** Format: uuid */
      programId?: string;
      /** Format: uuid */
      activityId?: string;
      /**
       * Format: uuid
       * @description Recurrence rule ID - links this event to a recurrence series
       */
      recurrenceId?: string;
      /** @description Indicates if this is the parent event of a recurrence series */
      isRecurrenceParent?: boolean;
    };
    EventUpdateRequest: {
      title: string;
      description?: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      /** Format: uuid */
      locationId?: string;
      capacity?: number;
      /** @description IDs of groups assigned to this event */
      groupIds?: string[];
      /** @description IDs of staff members to exclude from assigned groups */
      excludeStaffIds?: string[];
      /** @description IDs of campers to exclude from assigned groups */
      excludeCamperIds?: string[];
      /** @description IDs of certifications required for this event */
      requiredCertificationIds?: string[];
      /** Format: uuid */
      colorId?: string;
      /** Format: uuid */
      programId?: string;
      /** Format: uuid */
      activityId?: string;
      /**
       * Format: uuid
       * @description Recurrence rule ID - links this event to a recurrence series
       */
      recurrenceId?: string;
      /** @description Indicates if this is the parent event of a recurrence series */
      isRecurrenceParent?: boolean;
    };
  };
  responses: never;
  parameters: {
    /** @description Resource ID */
    id: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
