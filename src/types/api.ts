/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/campers": {
    /** List all campers */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"][];
          };
        };
      };
    };
    /** Create a new camper */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Camper"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/campers/{id}": {
    /** Get camper by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"];
          };
        };
      };
    };
    /** Update camper */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Camper"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete camper */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/staff-members": {
    /** List all staff members */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"][];
          };
        };
      };
    };
    /** Create a new staff member */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["StaffMember"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/staff-members/{id}": {
    /** Get staff member by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"];
          };
        };
      };
    };
    /** Update staff member */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StaffMember"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete staff member */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/rooms": {
    /** List all rooms */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Room"][];
          };
        };
      };
    };
    /** Create a new room */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/rooms/{id}": {
    /** Get room by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
      };
    };
    /** Update room */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete room */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/events": {
    /** List all events */
    get: {
      parameters: {
        query?: {
          startDate?: string;
          endDate?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"][];
          };
        };
      };
    };
    /** Create a new event */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/events/{id}": {
    /** Get event by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
      };
    };
    /** Update event */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete event */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/events/{id}/enroll": {
    /** Enroll a camper in an event */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            camperId?: string;
          };
        };
      };
      responses: {
        /** @description Enrolled */
        200: {
          content: never;
        };
        /** @description Conflict */
        409: {
          content: {
            "application/json": components["schemas"]["Conflict"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/events/{id}/unenroll": {
    /** Unenroll a camper from an event */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            camperId?: string;
          };
        };
      };
      responses: {
        /** @description Unenrolled */
        200: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/conflicts": {
    /** Check for scheduling conflicts */
    get: {
      responses: {
        /** @description List of conflicts */
        200: {
          content: {
            "application/json": components["schemas"]["Conflict"][];
          };
        };
      };
    };
  };
  "/sleeping-rooms": {
    /** List all sleeping rooms */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SleepingRoom"][];
          };
        };
      };
    };
    /** Create a new sleeping room */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SleepingRoom"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/sleeping-rooms/{id}": {
    /** Get sleeping room by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SleepingRoom"];
          };
        };
      };
    };
    /** Update sleeping room */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SleepingRoom"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete sleeping room */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Camper: {
      /** Format: uuid */
      id: string;
      firstName: string;
      lastName: string;
      age: number;
      /** @enum {string} */
      gender: "male" | "female";
      parentContact: string;
      allergies?: string[];
      medicalNotes?: string;
      photoUrl?: string;
      /** Format: date-time */
      registrationDate?: string;
      /**
       * Format: uuid
       * @description ID of the family group this camper belongs to
       */
      familyGroupId?: string;
      /**
       * Format: uuid
       * @description ID of the camp session this camper is registered for
       */
      sessionId?: string;
    };
    StaffMember: {
      /** Format: uuid */
      id: string;
      firstName: string;
      lastName: string;
      /** @enum {string} */
      role: "counselor" | "supervisor" | "director" | "nurse" | "instructor";
      /** Format: email */
      email?: string;
      phone?: string;
      certifications?: string[];
      certificationIds?: string[];
      photoUrl?: string;
      /**
       * Format: uuid
       * @description ID of the staff member who manages this person
       */
      managerId?: string;
    };
    Room: {
      /** Format: uuid */
      id: string;
      name: string;
      capacity: number;
      /** @enum {string} */
      type: "classroom" | "activity" | "sports" | "dining" | "outdoor" | "arts";
      location?: string;
      /** Format: uuid */
      locationId?: string;
      equipment?: string[];
      notes?: string;
    };
    SleepingRoom: {
      /** Format: uuid */
      id: string;
      name: string;
      beds: number;
      location?: string;
      /** Format: uuid */
      locationId?: string;
    };
    Event: {
      /** Format: uuid */
      id: string;
      title: string;
      description?: string;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      /** Format: uuid */
      roomId: string;
      capacity: number;
      assignedStaffIds?: string[];
      enrolledCamperIds?: string[];
      /** @enum {string} */
      type?: "activity" | "sports" | "arts" | "education" | "meal" | "free-time";
      requiredCertifications?: string[];
      /** @description Hex color code for calendar display (deprecated - use colorId) */
      color?: string;
      /** Format: uuid */
      colorId?: string;
      /** Format: uuid */
      programId?: string;
      /** Format: uuid */
      activityId?: string;
      /** @description Recurrence rule ID - links this event to a recurrence series */
      recurrenceId?: string;
      /** @description Indicates if this is the parent event of a recurrence series */
      isRecurrenceParent?: boolean;
    };
    Conflict: {
      /** @enum {string} */
      type?: "room_overcapacity" | "event_overcapacity" | "camper_double_booked" | "staff_double_booked" | "missing_certification";
      message?: string;
      entityId?: string;
      conflictingIds?: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;

// Export commonly used types
export type Camper = components["schemas"]["Camper"];
export type StaffMember = components["schemas"]["StaffMember"];
export type Room = components["schemas"]["Room"];
export type SleepingRoom = components["schemas"]["SleepingRoom"];
export type Event = components["schemas"]["Event"];
export type Conflict = components["schemas"]["Conflict"];

// Camper Group types for virtual groups
export interface CamperGroupFilter {
  ageMin?: number;
  ageMax?: number;
  gender?: 'male' | 'female';
  hasAllergies?: boolean;
}

export interface CamperGroup {
  id: string;
  name: string;
  description?: string;
  color?: string; // Deprecated - use colorId
  colorId?: string;
  filters: CamperGroupFilter;
  familyGroupIds?: string[]; // Optional array of family group IDs to include
  createdAt: string;
  updatedAt: string;
}

// Family Group - fundamental organizational unit
export interface FamilyGroup {
  id: string;
  name: string;
  description?: string;
  sleepingRoomId: string; // Required - each family group must be assigned to a room
  staffMemberIds: string[]; // Staff members assigned to this family group
  sessionId: string; // ID of the camp session this family group belongs to
  color?: string; // Deprecated - use colorId
  colorId?: string;
  createdAt: string;
  updatedAt: string;
}

// Activity - event template with default settings
export interface Activity {
  id: string;
  name: string;
  description?: string;
  programIds: string[]; // References to programs this activity belongs to
  durationMinutes: number; // Default duration
  defaultRoomId?: string; // Default location
  requiredCertifications?: string[]; // Required staff certifications
  minStaff?: number; // Minimum number of staff required
  maxStaff?: number; // Maximum number of staff allowed
  defaultCapacity?: number; // Default camper capacity
  color?: string; // Default color for events created from this activity (deprecated - use colorId)
  colorId?: string;
  createdAt: string;
  updatedAt: string;
}

// Program - collection of activities, staff, and locations
export interface Program {
  id: string;
  name: string;
  description?: string;
  color?: string; // Deprecated - use colorId
  colorId?: string;
  activityIds: string[]; // Activities belonging to this program
  staffMemberIds: string[]; // Staff members associated with this program
  roomIds: string[]; // Locations associated with this program
  createdAt: string;
  updatedAt: string;
}

// Location - physical locations within the camp
export interface Location {
  id: string;
  name: string;
  description?: string;
  type: 'indoor' | 'outdoor' | 'facility' | 'field' | 'water' | 'other';
  capacity?: number;
  equipment?: string[];
  notes?: string;
  createdAt: string;
  updatedAt: string;
}

// Certification - staff certifications/qualifications
export interface Certification {
  id: string;
  name: string;
  description?: string;
  expirationRequired: boolean; // Whether this certification expires
  validityPeriodMonths?: number; // How long the certification is valid for
  createdAt: string;
  updatedAt: string;
}

// Camp Color - customizable color options for the camp
export interface CampColor {
  id: string;
  name: string;
  hexValue: string; // Hex color value (e.g., "#FF5733")
  createdAt: string;
  updatedAt: string;
}

// Camp Session - time periods that campers register for
export interface CampSession {
  id: string;
  name: string;
  startDate: string; // ISO date string
  endDate: string; // ISO date string
  description?: string;
  maxCampers?: number; // Optional max capacity for this session
  createdAt: string;
  updatedAt: string;
}
