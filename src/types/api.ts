/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/campers": {
    /** List all campers */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"][];
          };
        };
      };
    };
    /** Create a new camper */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Camper"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/campers/{id}": {
    /** Get camper by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Camper"];
          };
        };
      };
    };
    /** Update camper */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Camper"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete camper */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/staff-members": {
    /** List all staff members */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"][];
          };
        };
      };
    };
    /** Create a new staff member */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["StaffMember"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/staff-members/{id}": {
    /** Get staff member by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["StaffMember"];
          };
        };
      };
    };
    /** Update staff member */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StaffMember"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete staff member */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/rooms": {
    /** List all rooms */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"][];
          };
        };
      };
    };
    /** Create a new room */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Location"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/rooms/{id}": {
    /** Get room by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
    };
    /** Update room */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Location"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete room */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/events": {
    /** List all events */
    get: {
      parameters: {
        query?: {
          startDate?: string;
          endDate?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"][];
          };
        };
      };
    };
    /** Create a new event */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EventCreationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
      };
    };
  };
  "/events/{id}": {
    /** Get event by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
      };
    };
    /** Update event */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete event */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/events/{id}/enroll": {
    /** Enroll a camper in an event */
    post: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            camperId?: string;
          };
        };
      };
      responses: {
        /** @description Enrolled */
        200: {
          content: never;
        };
        /** @description Conflict */
        409: {
          content: {
            "application/json": components["schemas"]["Conflict"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/events/{id}/unenroll": {
    /** Unenroll a camper from an event */
    post: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            camperId?: string;
          };
        };
      };
      responses: {
        /** @description Unenrolled */
        200: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/conflicts": {
    /** Check for scheduling conflicts */
    get: {
      responses: {
        /** @description List of conflicts */
        200: {
          content: {
            "application/json": components["schemas"]["Conflict"][];
          };
        };
      };
    };
  };
  "/sleeping-rooms": {
    /** List all sleeping rooms */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HousingRoom"][];
          };
        };
      };
    };
    /** Create a new sleeping room */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["HousingRoom"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/sleeping-rooms/{id}": {
    /** Get sleeping room by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HousingRoom"];
          };
        };
      };
    };
    /** Update sleeping room */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["HousingRoom"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete sleeping room */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
  "/areas": {
    /** List all areas */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Area"][];
          };
        };
      };
    };
    /** Create a new area */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Area"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/areas/{id}": {
    /** Get area by ID */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Area"];
          };
        };
      };
    };
    /** Update area */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Area"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete area */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["id"];
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        id: components["parameters"]["id"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Camper: {
      /** Format: uuid */
      id: string;
      firstName: string;
      lastName: string;
      age: number;
      /** @enum {string} */
      gender: "male" | "female";
      parentContact: string;
      allergies?: string[];
      medicalNotes?: string;
      photoUrl?: string;
      /** Format: date-time */
      registrationDate?: string;
      /**
       * Format: uuid
       * @description ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
       */
      housingRoomId?: string;
      /**
       * Format: uuid
       * @description ID of the family group this camper belongs to
       */
      familyGroupId?: string;
      /**
       * Format: uuid
       * @description ID of the camp session this camper is registered for
       */
      sessionId?: string;
    };
    StaffMember: {
      /** Format: uuid */
      id: string;
      firstName: string;
      lastName: string;
      /** @enum {string} */
      role: "counselor" | "supervisor" | "director" | "nurse" | "instructor";
      /** Format: email */
      email?: string;
      phone?: string;
      /** @description Staff certifications (deprecated - use certificationIds) */
      certifications?: string[];
      /** @description IDs of certifications this staff member holds */
      certificationIds?: string[];
      photoUrl?: string;
      /**
       * Format: uuid
       * @description ID of the staff member who manages this person
       */
      managerId?: string;
    };
    Location: {
      /** Format: uuid */
      id: string;
      name: string;
      capacity: number;
      /** @enum {string} */
      type: "classroom" | "activity" | "sports" | "dining" | "outdoor" | "arts";
      /**
       * Format: uuid
       * @description ID of the physical area where this location is situated
       */
      areaId?: string;
      equipment?: string[];
      notes?: string;
    };
    HousingRoom: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @description Number of beds in this housing room */
      beds: number;
      /**
       * Format: uuid
       * @description ID of the physical area where this housing room is located
       */
      areaId?: string;
    };
    Area: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** @enum {string} */
      type: "indoor" | "outdoor" | "facility" | "field" | "water" | "other";
      capacity?: number;
      equipment?: string[];
      notes?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Event: {
      /** Format: uuid */
      id: string;
      title: string;
      description?: string;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      /** Format: uuid */
      locationId: string;
      capacity: number;
      /** @description IDs of groups assigned to this event */
      groupIds?: string[];
      /** @description IDs of staff members to exclude from assigned groups */
      excludeStaffIds?: string[];
      /** @description IDs of campers to exclude from assigned groups */
      excludeCamperIds?: string[];
      requiredCertifications?: string[];
      /** Format: uuid */
      colorId?: string;
      /** Format: uuid */
      programId?: string;
      /** Format: uuid */
      activityId?: string;
      /**
       * Format: uuid
       * @description Recurrence rule ID - links this event to a recurrence series
       */
      recurrenceId?: string;
      /** @description Indicates if this is the parent event of a recurrence series */
      isRecurrenceParent?: boolean;
    };
    Conflict: {
      /** @enum {string} */
      type?: "room_overcapacity" | "event_overcapacity" | "camper_double_booked" | "staff_double_booked" | "missing_certification";
      message?: string;
      entityId?: string;
      conflictingIds?: string[];
    };
    Label: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CamperGroupFilter: {
      ageMin?: number;
      ageMax?: number;
      /** @enum {string} */
      gender?: "male" | "female";
      hasAllergies?: boolean;
    };
    CamperGroup: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      filters: components["schemas"]["CamperGroupFilter"];
      /** @description Optional array of family group IDs to include */
      familyGroupIds?: string[];
      /** @description IDs of labels assigned to this group */
      labelIds?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    FamilyGroup: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /**
       * Format: uuid
       * @description Required - each family group must be assigned to a housing room
       */
      housingRoomId: string;
      /** @description Staff members assigned to this family group */
      staffMemberIds: string[];
      /**
       * Format: uuid
       * @description ID of the camp session this family group belongs to
       */
      sessionId: string;
      /** Format: uuid */
      colorId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    StaffFilter: {
      /** @description Filter by staff roles */
      roles?: string[];
      /** @description Filter by required certifications */
      certificationIds?: string[];
      /** @description Minimum age for staff members */
      minAge?: number;
      /** @description Maximum age for staff members */
      maxAge?: number;
    };
    Group: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      /**
       * Format: uuid
       * @description Optional session this group belongs to
       */
      sessionId?: string;
      /**
       * Format: uuid
       * @description Optional housing room assignment for this group
       */
      housingRoomId?: string;
      /** @description Filter criteria to automatically match campers */
      camperFilters?: {
        ageMin?: number;
        ageMax?: number;
        /** @enum {string} */
        gender?: "male" | "female";
        hasAllergies?: boolean;
        /** Format: uuid */
        sessionId?: string;
        /** @description Filter by specific family groups */
        familyGroupIds?: string[];
      };
      /** @description Manually selected camper IDs (mutually exclusive with camperFilters) */
      camperIds?: string[];
      /** @description Filter criteria to automatically match staff members */
      staffFilters?: components["schemas"]["StaffFilter"];
      /** @description Manually selected staff IDs (mutually exclusive with staffFilters) */
      staffIds?: string[];
      /** @description Child group IDs for creating groups of groups */
      groupIds?: string[];
      /** @description IDs of labels assigned to this group */
      labelIds?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Activity: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** @description References to programs this activity belongs to */
      programIds: string[];
      /** @description Default duration */
      durationMinutes: number;
      /**
       * Format: uuid
       * @description Default location
       */
      defaultLocationId?: string;
      /** @description Required staff certifications */
      requiredCertifications?: string[];
      /** @description Minimum number of staff required */
      minStaff?: number;
      /** @description Maximum number of staff allowed */
      maxStaff?: number;
      /** @description Default camper capacity */
      defaultCapacity?: number;
      /** Format: uuid */
      colorId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Program: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** Format: uuid */
      colorId?: string;
      /** @description Activities belonging to this program */
      activityIds: string[];
      /** @description Staff members associated with this program */
      staffMemberIds: string[];
      /** @description Locations associated with this program */
      locationIds: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Certification: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** @description Whether this certification expires */
      expirationRequired: boolean;
      /** @description How long the certification is valid for */
      validityPeriodMonths?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CampColor: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @description Hex color value (e.g., "#FF5733") */
      hexValue: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CampSession: {
      /** Format: uuid */
      id: string;
      name: string;
      /**
       * Format: date
       * @description ISO date string
       */
      startDate: string;
      /**
       * Format: date
       * @description ISO date string
       */
      endDate: string;
      description?: string;
      /** @description Optional max capacity for this session */
      maxCampers?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    EventCreationRequest: {
      /** @description Title of the event */
      title: string;
      /** @description Description of the event */
      description?: string;
      /**
       * Format: date-time
       * @description Start time of the event
       */
      startTime: string;
      /**
       * Format: date-time
       * @description End time of the event
       */
      endTime: string;
      /**
       * Format: uuid
       * @description ID of the location of the event
       */
      locationId?: string;
      groupIds?: string[];
      /** @description IDs of campers to exclude from assigned groups */
      excludeCamperIds?: string[];
      /** @description IDs of staff to exclude from assigned groups */
      excludeStaffIds?: string[];
      /** @description IDs of staff certifications required for the event */
      requiredCertifications?: string[];
      /**
       * Format: uuid
       * @description ID of the program this event belongs to
       */
      programId?: string;
      /**
       * Format: uuid
       * @description ID of the activity this event was created from
       */
      activityId?: string;
      /**
       * Format: uuid
       * @description ID of the color this event uses
       */
      colorId?: string;
      /** @description Maximum number of campers this event can accommodate */
      capacity?: number;
      /**
       * Format: uuid
       * @description ID of the recurrence this event belongs to
       */
      recurrenceId?: string;
      /** @description Indicates if this is the parent event of a recurrence series */
      isRecurrenceParent?: boolean;
    };
  };
  responses: never;
  parameters: {
    /** @description Resource ID */
    id: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
