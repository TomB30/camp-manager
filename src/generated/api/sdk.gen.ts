// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import type {
  CreateActivityData,
  CreateActivityResponses,
  CreateAreaData,
  CreateAreaResponses,
  CreateCamperData,
  CreateCamperResponses,
  CreateCertificationData,
  CreateCertificationResponses,
  CreateColorData,
  CreateColorResponses,
  CreateEventData,
  CreateEventResponses,
  CreateGroupData,
  CreateGroupResponses,
  CreateHousingRoomData,
  CreateHousingRoomResponses,
  CreateLocationData,
  CreateLocationResponses,
  CreateProgramData,
  CreateProgramResponses,
  CreateRoleData,
  CreateRoleResponses,
  CreateSessionData,
  CreateSessionResponses,
  CreateStaffMemberData,
  CreateStaffMemberResponses,
  DeleteActivityByIdData,
  DeleteActivityByIdResponses,
  DeleteAreaByIdData,
  DeleteAreaByIdResponses,
  DeleteCamperByIdData,
  DeleteCamperByIdResponses,
  DeleteCertificationByIdData,
  DeleteCertificationByIdResponses,
  DeleteColorByIdData,
  DeleteColorByIdResponses,
  DeleteEventByIdData,
  DeleteEventByIdResponses,
  DeleteGroupByIdData,
  DeleteGroupByIdResponses,
  DeleteHousingRoomByIdData,
  DeleteHousingRoomByIdResponses,
  DeleteLocationByIdData,
  DeleteLocationByIdResponses,
  DeleteProgramByIdData,
  DeleteProgramByIdResponses,
  DeleteRoleByIdData,
  DeleteRoleByIdResponses,
  DeleteSessionByIdData,
  DeleteSessionByIdResponses,
  DeleteStaffMemberByIdData,
  DeleteStaffMemberByIdResponses,
  GetActivityByIdData,
  GetActivityByIdResponses,
  GetAreaByIdData,
  GetAreaByIdResponses,
  GetCamperByIdData,
  GetCamperByIdResponses,
  GetCertificationByIdData,
  GetCertificationByIdResponses,
  GetColorByIdData,
  GetColorByIdResponses,
  GetEventByIdData,
  GetEventByIdResponses,
  GetGroupByIdData,
  GetGroupByIdResponses,
  GetHousingRoomByIdData,
  GetHousingRoomByIdResponses,
  GetLocationByIdData,
  GetLocationByIdResponses,
  GetProgramByIdData,
  GetProgramByIdResponses,
  GetRoleByIdData,
  GetRoleByIdResponses,
  GetSessionByIdData,
  GetSessionByIdResponses,
  GetStaffMemberByIdData,
  GetStaffMemberByIdResponses,
  ListActivitiesData,
  ListActivitiesResponses,
  ListAreasData,
  ListAreasResponses,
  ListCampersData,
  ListCampersResponses,
  ListCertificationsData,
  ListCertificationsResponses,
  ListColorsData,
  ListColorsResponses,
  ListEventsData,
  ListEventsResponses,
  ListGroupsData,
  ListGroupsResponses,
  ListHousingRoomsData,
  ListHousingRoomsResponses,
  ListLocationsData,
  ListLocationsResponses,
  ListProgramsData,
  ListProgramsResponses,
  ListRolesData,
  ListRolesResponses,
  ListSessionsData,
  ListSessionsResponses,
  ListStaffMembersData,
  ListStaffMembersResponses,
  UpdateActivityByIdData,
  UpdateActivityByIdResponses,
  UpdateAreaByIdData,
  UpdateAreaByIdResponses,
  UpdateCamperByIdData,
  UpdateCamperByIdResponses,
  UpdateCertificationByIdData,
  UpdateCertificationByIdResponses,
  UpdateColorByIdData,
  UpdateColorByIdResponses,
  UpdateEventByIdData,
  UpdateEventByIdResponses,
  UpdateGroupByIdData,
  UpdateGroupByIdResponses,
  UpdateHousingRoomByIdData,
  UpdateHousingRoomByIdResponses,
  UpdateLocationByIdData,
  UpdateLocationByIdResponses,
  UpdateProgramByIdData,
  UpdateProgramByIdResponses,
  UpdateRoleByIdData,
  UpdateRoleByIdResponses,
  UpdateSessionByIdData,
  UpdateSessionByIdResponses,
  UpdateStaffMemberByIdData,
  UpdateStaffMemberByIdResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List all sessions
 */
export const listSessions = <ThrowOnError extends boolean = false>(
  options?: Options<ListSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSessionsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/sessions",
    ...options,
  });
};

/**
 * Create a new session
 */
export const createSession = <ThrowOnError extends boolean = false>(
  options: Options<CreateSessionData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateSessionResponses,
    unknown,
    ThrowOnError
  >({
    url: "/sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete session by ID
 */
export const deleteSessionById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSessionByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteSessionByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/sessions/{id}",
    ...options,
  });
};

/**
 * Get session by ID
 */
export const getSessionById = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetSessionByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/sessions/{id}",
    ...options,
  });
};

/**
 * Update session by ID
 */
export const updateSessionById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSessionByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateSessionByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/sessions/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all campers
 */
export const listCampers = <ThrowOnError extends boolean = false>(
  options?: Options<ListCampersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCampersResponses,
    unknown,
    ThrowOnError
  >({
    url: "/campers",
    ...options,
  });
};

/**
 * Create a new camper
 */
export const createCamper = <ThrowOnError extends boolean = false>(
  options: Options<CreateCamperData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateCamperResponses,
    unknown,
    ThrowOnError
  >({
    url: "/campers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete camper
 */
export const deleteCamperById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCamperByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteCamperByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/campers/{id}",
    ...options,
  });
};

/**
 * Get camper by ID
 */
export const getCamperById = <ThrowOnError extends boolean = false>(
  options: Options<GetCamperByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetCamperByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/campers/{id}",
    ...options,
  });
};

/**
 * Update camper
 */
export const updateCamperById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCamperByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateCamperByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/campers/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all staff members
 */
export const listStaffMembers = <ThrowOnError extends boolean = false>(
  options?: Options<ListStaffMembersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListStaffMembersResponses,
    unknown,
    ThrowOnError
  >({
    url: "/staff-members",
    ...options,
  });
};

/**
 * Create a new staff member
 */
export const createStaffMember = <ThrowOnError extends boolean = false>(
  options: Options<CreateStaffMemberData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateStaffMemberResponses,
    unknown,
    ThrowOnError
  >({
    url: "/staff-members",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete staff member by ID
 */
export const deleteStaffMemberById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteStaffMemberByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteStaffMemberByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/staff-members/{id}",
    ...options,
  });
};

/**
 * Get staff member by ID
 */
export const getStaffMemberById = <ThrowOnError extends boolean = false>(
  options: Options<GetStaffMemberByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetStaffMemberByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/staff-members/{id}",
    ...options,
  });
};

/**
 * Update staff member by ID
 */
export const updateStaffMemberById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateStaffMemberByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateStaffMemberByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/staff-members/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all areas
 */
export const listAreas = <ThrowOnError extends boolean = false>(
  options?: Options<ListAreasData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListAreasResponses,
    unknown,
    ThrowOnError
  >({
    url: "/areas",
    ...options,
  });
};

/**
 * Create a new area
 */
export const createArea = <ThrowOnError extends boolean = false>(
  options: Options<CreateAreaData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateAreaResponses,
    unknown,
    ThrowOnError
  >({
    url: "/areas",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete area
 */
export const deleteAreaById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAreaByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteAreaByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/areas/{id}",
    ...options,
  });
};

/**
 * Get area by ID
 */
export const getAreaById = <ThrowOnError extends boolean = false>(
  options: Options<GetAreaByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetAreaByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/areas/{id}",
    ...options,
  });
};

/**
 * Update area
 */
export const updateAreaById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAreaByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateAreaByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/areas/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all locations
 */
export const listLocations = <ThrowOnError extends boolean = false>(
  options?: Options<ListLocationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListLocationsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/locations",
    ...options,
  });
};

/**
 * Create a new location
 */
export const createLocation = <ThrowOnError extends boolean = false>(
  options: Options<CreateLocationData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateLocationResponses,
    unknown,
    ThrowOnError
  >({
    url: "/locations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete location by ID
 */
export const deleteLocationById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLocationByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteLocationByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/locations/{id}",
    ...options,
  });
};

/**
 * Get location by ID
 */
export const getLocationById = <ThrowOnError extends boolean = false>(
  options: Options<GetLocationByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetLocationByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/locations/{id}",
    ...options,
  });
};

/**
 * Update location by ID
 */
export const updateLocationById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLocationByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateLocationByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/locations/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all programs
 */
export const listPrograms = <ThrowOnError extends boolean = false>(
  options?: Options<ListProgramsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListProgramsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/programs",
    ...options,
  });
};

/**
 * Create a new program
 */
export const createProgram = <ThrowOnError extends boolean = false>(
  options: Options<CreateProgramData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateProgramResponses,
    unknown,
    ThrowOnError
  >({
    url: "/programs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete program by ID
 */
export const deleteProgramById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProgramByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteProgramByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/programs/{id}",
    ...options,
  });
};

/**
 * Get program by ID
 */
export const getProgramById = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetProgramByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/programs/{id}",
    ...options,
  });
};

/**
 * Update program by ID
 */
export const updateProgramById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProgramByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateProgramByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/programs/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all activities
 */
export const listActivities = <ThrowOnError extends boolean = false>(
  options?: Options<ListActivitiesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListActivitiesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/activities",
    ...options,
  });
};

/**
 * Create a new activity
 */
export const createActivity = <ThrowOnError extends boolean = false>(
  options: Options<CreateActivityData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateActivityResponses,
    unknown,
    ThrowOnError
  >({
    url: "/activities",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete activity by ID
 */
export const deleteActivityById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteActivityByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteActivityByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/activities/{id}",
    ...options,
  });
};

/**
 * Get activity by ID
 */
export const getActivityById = <ThrowOnError extends boolean = false>(
  options: Options<GetActivityByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetActivityByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/activities/{id}",
    ...options,
  });
};

/**
 * Update activity by ID
 */
export const updateActivityById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateActivityByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateActivityByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/activities/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all colors
 */
export const listColors = <ThrowOnError extends boolean = false>(
  options?: Options<ListColorsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListColorsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/colors",
    ...options,
  });
};

/**
 * Create a new color
 */
export const createColor = <ThrowOnError extends boolean = false>(
  options: Options<CreateColorData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateColorResponses,
    unknown,
    ThrowOnError
  >({
    url: "/colors",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete color by ID
 */
export const deleteColorById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteColorByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteColorByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/colors/{id}",
    ...options,
  });
};

/**
 * Get color by ID
 */
export const getColorById = <ThrowOnError extends boolean = false>(
  options: Options<GetColorByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetColorByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/colors/{id}",
    ...options,
  });
};

/**
 * Update color by ID
 */
export const updateColorById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateColorByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateColorByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/colors/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all roles
 */
export const listRoles = <ThrowOnError extends boolean = false>(
  options?: Options<ListRolesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListRolesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/roles",
    ...options,
  });
};

/**
 * Create a new role
 */
export const createRole = <ThrowOnError extends boolean = false>(
  options: Options<CreateRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: "/roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete role by ID
 */
export const deleteRoleById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRoleByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteRoleByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/roles/{id}",
    ...options,
  });
};

/**
 * Get role by ID
 */
export const getRoleById = <ThrowOnError extends boolean = false>(
  options: Options<GetRoleByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetRoleByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/roles/{id}",
    ...options,
  });
};

/**
 * Update role by ID
 */
export const updateRoleById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRoleByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateRoleByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/roles/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all certifications
 */
export const listCertifications = <ThrowOnError extends boolean = false>(
  options?: Options<ListCertificationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCertificationsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/certifications",
    ...options,
  });
};

/**
 * Create a new certification
 */
export const createCertification = <ThrowOnError extends boolean = false>(
  options: Options<CreateCertificationData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateCertificationResponses,
    unknown,
    ThrowOnError
  >({
    url: "/certifications",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete certification by ID
 */
export const deleteCertificationById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCertificationByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteCertificationByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/certifications/{id}",
    ...options,
  });
};

/**
 * Get certification by ID
 */
export const getCertificationById = <ThrowOnError extends boolean = false>(
  options: Options<GetCertificationByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetCertificationByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/certifications/{id}",
    ...options,
  });
};

/**
 * Update certification by ID
 */
export const updateCertificationById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCertificationByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateCertificationByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/certifications/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all housing rooms
 */
export const listHousingRooms = <ThrowOnError extends boolean = false>(
  options?: Options<ListHousingRoomsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListHousingRoomsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/housing-rooms",
    ...options,
  });
};

/**
 * Create a new housing room
 */
export const createHousingRoom = <ThrowOnError extends boolean = false>(
  options: Options<CreateHousingRoomData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateHousingRoomResponses,
    unknown,
    ThrowOnError
  >({
    url: "/housing-rooms",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete housing room by ID
 */
export const deleteHousingRoomById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteHousingRoomByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteHousingRoomByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/housing-rooms/{id}",
    ...options,
  });
};

/**
 * Get housing room by ID
 */
export const getHousingRoomById = <ThrowOnError extends boolean = false>(
  options: Options<GetHousingRoomByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetHousingRoomByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/housing-rooms/{id}",
    ...options,
  });
};

/**
 * Update housing room
 */
export const updateHousingRoomById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateHousingRoomByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateHousingRoomByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/housing-rooms/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListGroupsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/groups",
    ...options,
  });
};

/**
 * Create a new group
 */
export const createGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateGroupData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateGroupResponses,
    unknown,
    ThrowOnError
  >({
    url: "/groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete group by ID
 */
export const deleteGroupById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteGroupByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/groups/{id}",
    ...options,
  });
};

/**
 * Get group by ID
 */
export const getGroupById = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetGroupByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/groups/{id}",
    ...options,
  });
};

/**
 * Update group by ID
 */
export const updateGroupById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateGroupByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/groups/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all events
 */
export const listEvents = <ThrowOnError extends boolean = false>(
  options?: Options<ListEventsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListEventsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/events",
    ...options,
  });
};

/**
 * Create a new event
 */
export const createEvent = <ThrowOnError extends boolean = false>(
  options: Options<CreateEventData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateEventResponses,
    unknown,
    ThrowOnError
  >({
    url: "/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete event
 */
export const deleteEventById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteEventByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteEventByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/events/{id}",
    ...options,
  });
};

/**
 * Get event by ID
 */
export const getEventById = <ThrowOnError extends boolean = false>(
  options: Options<GetEventByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetEventByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/events/{id}",
    ...options,
  });
};

/**
 * Update event
 */
export const updateEventById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEventByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateEventByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: "/events/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
