// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};

export type EntityMeta = {
  /**
   * Unique identifier for the entity
   */
  id: string;
  /**
   * Name of the entity
   */
  name: string;
  /**
   * Description of the entity
   */
  description?: string;
  /**
   * Timestamp when the entity was created
   */
  createdAt: string;
  /**
   * Timestamp when the entity was last updated
   */
  updatedAt: string;
};

export type EntityCreationRequestMeta = {
  /**
   * Name of the entity
   */
  name: string;
  /**
   * Description of the entity
   */
  description?: string;
};

export type Camper = {
  meta: EntityMeta;
  spec: {
    age: number;
    gender: "male" | "female";
    photoUrl?: string;
    registrationDate?: string;
    /**
     * ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
     */
    housingRoomId?: string;
    /**
     * ID of the family group this camper belongs to
     */
    familyGroupId?: string;
    /**
     * ID of the camp session this camper is registered for
     */
    sessionId?: string;
  };
};

export type CamperCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    age: number;
    gender: "male" | "female";
    /**
     * ID of the camp session this camper is registered in
     */
    sessionId: string;
    photoUrl?: string;
    registrationDate?: string;
    /**
     * ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
     */
    housingRoomId?: string;
    /**
     * ID of the family group this camper belongs to
     */
    familyGroupId?: string;
  };
};

export type CamperUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    age: number;
    gender: "male" | "female";
    /**
     * ID of the camp session this camper is registered in
     */
    sessionId: string;
    photoUrl?: string;
    registrationDate?: string;
    /**
     * ID of the housing room assigned to this camper (deprecated - use familyGroupId instead)
     */
    housingRoomId?: string;
    /**
     * ID of the family group this camper belongs to
     */
    familyGroupId?: string;
  };
};

export type StaffMember = {
  meta: EntityMeta;
  spec: {
    /**
     * ID of the role this staff member has
     */
    roleId: string;
    email?: string;
    phone?: string;
    /**
     * IDs of certifications this staff member holds
     */
    certificationIds?: Array<string>;
    photoUrl?: string;
    /**
     * ID of the staff member who manages this person
     */
    managerId?: string;
  };
};

export type StaffMemberCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * ID of the role this staff member has
     */
    roleId: string;
    email?: string;
    phone?: string;
    /**
     * IDs of certifications this staff member holds
     */
    certificationIds?: Array<string>;
    photoUrl?: string;
    /**
     * ID of the staff member who manages this person
     */
    managerId?: string;
  };
};

export type StaffMemberUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * ID of the role this staff member has
     */
    roleId: string;
    email?: string;
    phone?: string;
    /**
     * IDs of certifications this staff member holds
     */
    certificationIds?: Array<string>;
    photoUrl?: string;
    /**
     * ID of the staff member who manages this person
     */
    managerId?: string;
  };
};

export type Role = {
  meta: EntityMeta;
  spec: {
    [key: string]: unknown;
  };
};

export type RoleCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    [key: string]: unknown;
  };
};

export type RoleUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    [key: string]: unknown;
  };
};

export type Area = {
  meta: EntityMeta;
  spec: {
    capacity?: number;
    equipment?: Array<string>;
    notes?: string;
  };
};

export type AreaCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    capacity?: number;
    equipment?: Array<string>;
    notes?: string;
  };
};

export type AreaUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    capacity?: number;
    equipment?: Array<string>;
    notes?: string;
  };
};

export type Location = {
  meta: EntityMeta;
  spec: {
    capacity?: number;
    /**
     * ID of the physical area where this location is situated
     */
    areaId?: string;
    equipment?: Array<string>;
    notes?: string;
  };
};

export type LocationCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    capacity?: number;
    /**
     * ID of the physical area where this location is situated
     */
    areaId?: string;
    equipment?: Array<string>;
    notes?: string;
  };
};

export type LocationUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    capacity?: number;
    /**
     * ID of the physical area where this location is situated
     */
    areaId?: string;
    equipment?: Array<string>;
    notes?: string;
  };
};

export type Program = {
  meta: EntityMeta;
  spec: {
    colorId?: string;
    /**
     * Activities belonging to this program
     */
    activityIds?: Array<string>;
    /**
     * Staff members associated with this program
     */
    staffMemberIds?: Array<string>;
    /**
     * Locations associated with this program
     */
    locationIds?: Array<string>;
  };
};

export type ProgramCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    colorId?: string;
    /**
     * Activities belonging to this program
     */
    activityIds?: Array<string>;
    /**
     * Staff members associated with this program
     */
    staffMemberIds?: Array<string>;
    /**
     * Locations associated with this program
     */
    locationIds?: Array<string>;
  };
};

export type ProgramUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    colorId?: string;
    /**
     * Activities belonging to this program
     */
    activityIds?: Array<string>;
    /**
     * Staff members associated with this program
     */
    staffMemberIds?: Array<string>;
    /**
     * Locations associated with this program
     */
    locationIds?: Array<string>;
  };
};

export type Activity = {
  meta: EntityMeta;
  spec: {
    /**
     * IDs of programs this activity belongs to
     */
    programIds: Array<string>;
    /**
     * Default duration in minutes
     */
    duration?: number;
    /**
     * ID of the default location
     */
    defaultLocationId?: string;
    /**
     * IDs of required staff certifications
     */
    requiredCertificationIds?: Array<string>;
    /**
     * Minimum number of staff required
     */
    minStaff?: number;
    /**
     * Default activity capacity
     */
    defaultCapacity?: number;
  };
};

export type ActivityCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * IDs of programs this activity belongs to
     */
    programIds: Array<string>;
    /**
     * Default duration in minutes
     */
    duration?: number;
    /**
     * ID of the default location
     */
    defaultLocationId?: string;
    /**
     * IDs of required staff certifications
     */
    requiredCertificationIds?: Array<string>;
    /**
     * Minimum number of staff required
     */
    minStaff?: number;
    /**
     * Default activity capacity
     */
    defaultCapacity?: number;
  };
};

export type ActivityUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * IDs of programs this activity belongs to
     */
    programIds: Array<string>;
    /**
     * Default duration in minutes
     */
    duration?: number;
    /**
     * ID of the default location
     */
    defaultLocationId?: string;
    /**
     * IDs of required staff certifications
     */
    requiredCertificationIds?: Array<string>;
    /**
     * Minimum number of staff required
     */
    minStaff?: number;
    /**
     * Default activity capacity
     */
    defaultCapacity?: number;
  };
};

export type Color = {
  meta: EntityMeta;
  spec: {
    /**
     * Hex color value (e.g., "#FF5733")
     */
    hexValue: string;
    /**
     * Whether this is the default color for events
     */
    default?: boolean;
  };
};

export type ColorCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Hex color value (e.g., "#FF5733")
     */
    hexValue: string;
    /**
     * Whether this is the default color for events
     */
    default?: boolean;
  };
};

export type ColorUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Hex color value (e.g., "#FF5733")
     */
    hexValue: string;
    /**
     * Whether this is the default color for events
     */
    default?: boolean;
  };
};

export type Certification = {
  meta: EntityMeta;
  spec: {
    [key: string]: unknown;
  };
};

export type CertificationCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    [key: string]: unknown;
  };
};

export type CertificationUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    [key: string]: unknown;
  };
};

export type HousingRoom = {
  meta: EntityMeta;
  spec: {
    /**
     * Number of beds in this housing room
     */
    beds: number;
    /**
     * ID of the physical area where this housing room is located
     */
    areaId?: string;
  };
};

export type HousingRoomCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Number of beds in this housing room
     */
    beds: number;
    /**
     * ID of the physical area where this housing room is located
     */
    areaId?: string;
  };
};

export type HousingRoomUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Number of beds in this housing room
     */
    beds: number;
    /**
     * ID of the physical area where this housing room is located
     */
    areaId?: string;
  };
};

export type Session = {
  meta: EntityMeta;
  spec: {
    startDate: string;
    endDate: string;
  };
};

export type SessionCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    startDate: string;
    endDate: string;
  };
};

export type SessionUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    startDate: string;
    endDate: string;
  };
};

export type Group = {
  meta: EntityMeta;
  spec: {
    /**
     * Optional session this group belongs to
     */
    sessionId?: string;
    /**
     * Optional housing room assignment for this group
     */
    housingRoomId?: string;
    /**
     * Filter criteria to automatically match campers
     */
    camperFilters?: {
      ageMin?: number;
      ageMax?: number;
      gender?: "male" | "female";
      hasAllergies?: boolean;
      /**
       * Filter by specific session
       */
      sessionId?: string;
      /**
       * Filter by specific family groups
       */
      familyGroupIds?: Array<string>;
    };
    /**
     * Manually selected camper IDs (mutually exclusive with camperFilters)
     */
    camperIds?: Array<string>;
    /**
     * Filter criteria to automatically match staff members
     */
    staffFilters?: {
      /**
       * Filter by staff roles
       */
      roles?: Array<string>;
      /**
       * Filter by certifications
       */
      certificationIds?: Array<string>;
    };
    /**
     * Manually selected staff IDs (mutually exclusive with staffFilters)
     */
    staffIds?: Array<string>;
    /**
     * Child group IDs for creating groups of groups
     */
    groupIds?: Array<string>;
    /**
     * IDs of labels assigned to this group
     */
    labelIds?: Array<string>;
  };
};

export type GroupCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Optional session this group belongs to
     */
    sessionId?: string;
    /**
     * Optional housing room assignment for this group
     */
    housingRoomId?: string;
    /**
     * Filter criteria to automatically match campers
     */
    camperFilters?: {
      ageMin?: number;
      ageMax?: number;
      gender?: "male" | "female";
      hasAllergies?: boolean;
      /**
       * Filter by specific session
       */
      sessionId?: string;
      /**
       * Filter by specific family groups
       */
      familyGroupIds?: Array<string>;
    };
    /**
     * Manually selected camper IDs (mutually exclusive with camperFilters)
     */
    camperIds?: Array<string>;
    /**
     * Filter criteria to automatically match staff members
     */
    staffFilters?: {
      /**
       * Filter by staff roles
       */
      roles?: Array<string>;
      /**
       * Filter by certifications
       */
      certificationIds?: Array<string>;
    };
    /**
     * Manually selected staff IDs (mutually exclusive with staffFilters)
     */
    staffIds?: Array<string>;
    /**
     * Child group IDs for creating groups of groups
     */
    groupIds?: Array<string>;
    /**
     * IDs of labels assigned to this group
     */
    labelIds?: Array<string>;
  };
};

export type GroupUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Optional session this group belongs to
     */
    sessionId?: string;
    /**
     * Optional housing room assignment for this group
     */
    housingRoomId?: string;
    /**
     * Filter criteria to automatically match campers
     */
    camperFilters?: {
      ageMin?: number;
      ageMax?: number;
      gender?: "male" | "female";
      hasAllergies?: boolean;
      /**
       * Filter by specific session
       */
      sessionId?: string;
      /**
       * Filter by specific family groups
       */
      familyGroupIds?: Array<string>;
    };
    /**
     * Manually selected camper IDs (mutually exclusive with camperFilters)
     */
    camperIds?: Array<string>;
    /**
     * Filter criteria to automatically match staff members
     */
    staffFilters?: {
      /**
       * Filter by staff roles
       */
      roles?: Array<string>;
      /**
       * Filter by certifications
       */
      certificationIds?: Array<string>;
    };
    /**
     * Manually selected staff IDs (mutually exclusive with staffFilters)
     */
    staffIds?: Array<string>;
    /**
     * Child group IDs for creating groups of groups
     */
    groupIds?: Array<string>;
    /**
     * IDs of labels assigned to this group
     */
    labelIds?: Array<string>;
  };
};

export type Event = {
  meta: EntityMeta;
  spec: {
    startDate: string;
    endDate: string;
    locationId?: string;
    capacity?: number;
    /**
     * IDs of groups assigned to this event
     */
    groupIds?: Array<string>;
    /**
     * IDs of staff members to exclude from assigned groups
     */
    excludeStaffIds?: Array<string>;
    /**
     * IDs of campers to exclude from assigned groups
     */
    excludeCamperIds?: Array<string>;
    /**
     * IDs of certifications required for this event
     */
    requiredCertificationIds?: Array<string>;
    colorId?: string;
    programId?: string;
    activityId?: string;
    /**
     * Recurrence rule ID - links this event to a recurrence series
     */
    recurrenceId?: string;
    /**
     * Indicates if this is the parent event of a recurrence series
     */
    isRecurrenceParent?: boolean;
  };
};

export type EventCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    startDate: string;
    endDate: string;
    locationId?: string;
    capacity?: number;
    /**
     * IDs of groups assigned to this event
     */
    groupIds?: Array<string>;
    /**
     * IDs of staff members to exclude from assigned groups
     */
    excludeStaffIds?: Array<string>;
    /**
     * IDs of campers to exclude from assigned groups
     */
    excludeCamperIds?: Array<string>;
    /**
     * IDs of certifications required for this event
     */
    requiredCertificationIds?: Array<string>;
    colorId?: string;
    programId?: string;
    activityId?: string;
    /**
     * Recurrence rule ID - links this event to a recurrence series
     */
    recurrenceId?: string;
    /**
     * Indicates if this is the parent event of a recurrence series
     */
    isRecurrenceParent?: boolean;
  };
};

export type EventUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    startDate: string;
    endDate: string;
    locationId?: string;
    capacity?: number;
    /**
     * IDs of groups assigned to this event
     */
    groupIds?: Array<string>;
    /**
     * IDs of staff members to exclude from assigned groups
     */
    excludeStaffIds?: Array<string>;
    /**
     * IDs of campers to exclude from assigned groups
     */
    excludeCamperIds?: Array<string>;
    /**
     * IDs of certifications required for this event
     */
    requiredCertificationIds?: Array<string>;
    colorId?: string;
    programId?: string;
    activityId?: string;
    /**
     * Recurrence rule ID - links this event to a recurrence series
     */
    recurrenceId?: string;
    /**
     * Indicates if this is the parent event of a recurrence series
     */
    isRecurrenceParent?: boolean;
  };
};

export type Camp = {
  meta: EntityMeta;
  spec: {
    /**
     * Overall camp season start date
     */
    startDate: string;
    /**
     * Overall camp season end date
     */
    endDate: string;
    /**
     * Daily start time for calendar display (24-hour format HH:MM)
     */
    dailyStartTime: string;
    /**
     * Daily end time for calendar display (24-hour format HH:MM)
     */
    dailyEndTime: string;
    address?: {
      street?: string;
      city?: string;
      state?: string;
      zipCode?: string;
      country?: string;
    };
    contactInfo?: {
      phone?: string;
      email?: string;
      website?: string;
    };
    logoUrl?: string;
  };
};

export type CampCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Overall camp season start date
     */
    startDate: string;
    /**
     * Overall camp season end date
     */
    endDate: string;
    /**
     * Daily start time for calendar display (24-hour format HH:MM)
     */
    dailyStartTime: string;
    /**
     * Daily end time for calendar display (24-hour format HH:MM)
     */
    dailyEndTime: string;
    address?: {
      street?: string;
      city?: string;
      state?: string;
      zipCode?: string;
      country?: string;
    };
    contactInfo?: {
      phone?: string;
      email?: string;
      website?: string;
    };
    logoUrl?: string;
  };
};

export type CampUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Overall camp season start date
     */
    startDate: string;
    /**
     * Overall camp season end date
     */
    endDate: string;
    /**
     * Daily start time for calendar display (24-hour format HH:MM)
     */
    dailyStartTime: string;
    /**
     * Daily end time for calendar display (24-hour format HH:MM)
     */
    dailyEndTime: string;
    address?: {
      street?: string;
      city?: string;
      state?: string;
      zipCode?: string;
      country?: string;
    };
    contactInfo?: {
      phone?: string;
      email?: string;
      website?: string;
    };
    logoUrl?: string;
  };
};

export type DurationPreset = {
  meta: EntityMeta;
  spec: {
    /**
     * Duration in minutes
     */
    durationMinutes: number;
    /**
     * Whether this is the default duration preset
     */
    default?: boolean;
  };
};

export type DurationPresetCreationRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Duration in minutes
     */
    durationMinutes: number;
    /**
     * Whether this is the default duration preset
     */
    default?: boolean;
  };
};

export type DurationPresetUpdateRequest = {
  meta: EntityCreationRequestMeta;
  spec: {
    /**
     * Duration in minutes
     */
    durationMinutes: number;
    /**
     * Whether this is the default duration preset
     */
    default?: boolean;
  };
};

/**
 * Resource ID
 */
export type Id = string;

export type ListSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/sessions";
};

export type ListSessionsResponses = {
  /**
   * Success
   */
  200: Array<Session>;
};

export type ListSessionsResponse =
  ListSessionsResponses[keyof ListSessionsResponses];

export type CreateSessionData = {
  body: SessionCreationRequest;
  path?: never;
  query?: never;
  url: "/sessions";
};

export type CreateSessionResponses = {
  /**
   * Success
   */
  200: Session;
};

export type CreateSessionResponse =
  CreateSessionResponses[keyof CreateSessionResponses];

export type DeleteSessionByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/sessions/{id}";
};

export type DeleteSessionByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteSessionByIdResponse =
  DeleteSessionByIdResponses[keyof DeleteSessionByIdResponses];

export type GetSessionByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/sessions/{id}";
};

export type GetSessionByIdResponses = {
  /**
   * Success
   */
  200: Session;
};

export type GetSessionByIdResponse =
  GetSessionByIdResponses[keyof GetSessionByIdResponses];

export type UpdateSessionByIdData = {
  body: SessionUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/sessions/{id}";
};

export type UpdateSessionByIdResponses = {
  /**
   * Success
   */
  200: Session;
};

export type UpdateSessionByIdResponse =
  UpdateSessionByIdResponses[keyof UpdateSessionByIdResponses];

export type ListCampersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/campers";
};

export type ListCampersResponses = {
  /**
   * Success
   */
  200: Array<Camper>;
};

export type ListCampersResponse =
  ListCampersResponses[keyof ListCampersResponses];

export type CreateCamperData = {
  body: CamperCreationRequest;
  path?: never;
  query?: never;
  url: "/campers";
};

export type CreateCamperResponses = {
  /**
   * Success
   */
  200: Camper;
};

export type CreateCamperResponse =
  CreateCamperResponses[keyof CreateCamperResponses];

export type DeleteCamperByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/campers/{id}";
};

export type DeleteCamperByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteCamperByIdResponse =
  DeleteCamperByIdResponses[keyof DeleteCamperByIdResponses];

export type GetCamperByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/campers/{id}";
};

export type GetCamperByIdResponses = {
  /**
   * Success
   */
  200: Camper;
};

export type GetCamperByIdResponse =
  GetCamperByIdResponses[keyof GetCamperByIdResponses];

export type UpdateCamperByIdData = {
  body: CamperUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/campers/{id}";
};

export type UpdateCamperByIdResponses = {
  /**
   * Success
   */
  200: Camper;
};

export type UpdateCamperByIdResponse =
  UpdateCamperByIdResponses[keyof UpdateCamperByIdResponses];

export type ListStaffMembersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/staff-members";
};

export type ListStaffMembersResponses = {
  /**
   * Success
   */
  200: Array<StaffMember>;
};

export type ListStaffMembersResponse =
  ListStaffMembersResponses[keyof ListStaffMembersResponses];

export type CreateStaffMemberData = {
  body: StaffMemberCreationRequest;
  path?: never;
  query?: never;
  url: "/staff-members";
};

export type CreateStaffMemberResponses = {
  /**
   * Success
   */
  200: StaffMember;
};

export type CreateStaffMemberResponse =
  CreateStaffMemberResponses[keyof CreateStaffMemberResponses];

export type DeleteStaffMemberByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/staff-members/{id}";
};

export type DeleteStaffMemberByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteStaffMemberByIdResponse =
  DeleteStaffMemberByIdResponses[keyof DeleteStaffMemberByIdResponses];

export type GetStaffMemberByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/staff-members/{id}";
};

export type GetStaffMemberByIdResponses = {
  /**
   * Success
   */
  200: StaffMember;
};

export type GetStaffMemberByIdResponse =
  GetStaffMemberByIdResponses[keyof GetStaffMemberByIdResponses];

export type UpdateStaffMemberByIdData = {
  body: StaffMemberUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/staff-members/{id}";
};

export type UpdateStaffMemberByIdResponses = {
  /**
   * Success
   */
  200: StaffMember;
};

export type UpdateStaffMemberByIdResponse =
  UpdateStaffMemberByIdResponses[keyof UpdateStaffMemberByIdResponses];

export type ListAreasData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/areas";
};

export type ListAreasResponses = {
  /**
   * Success
   */
  200: Array<Area>;
};

export type ListAreasResponse = ListAreasResponses[keyof ListAreasResponses];

export type CreateAreaData = {
  body: AreaCreationRequest;
  path?: never;
  query?: never;
  url: "/areas";
};

export type CreateAreaResponses = {
  /**
   * Success
   */
  200: Area;
};

export type CreateAreaResponse = CreateAreaResponses[keyof CreateAreaResponses];

export type DeleteAreaByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/areas/{id}";
};

export type DeleteAreaByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteAreaByIdResponse =
  DeleteAreaByIdResponses[keyof DeleteAreaByIdResponses];

export type GetAreaByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/areas/{id}";
};

export type GetAreaByIdResponses = {
  /**
   * Success
   */
  200: Area;
};

export type GetAreaByIdResponse =
  GetAreaByIdResponses[keyof GetAreaByIdResponses];

export type UpdateAreaByIdData = {
  body: AreaUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/areas/{id}";
};

export type UpdateAreaByIdResponses = {
  /**
   * Success
   */
  200: Area;
};

export type UpdateAreaByIdResponse =
  UpdateAreaByIdResponses[keyof UpdateAreaByIdResponses];

export type ListLocationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/locations";
};

export type ListLocationsResponses = {
  /**
   * Success
   */
  200: Array<Location>;
};

export type ListLocationsResponse =
  ListLocationsResponses[keyof ListLocationsResponses];

export type CreateLocationData = {
  body: LocationCreationRequest;
  path?: never;
  query?: never;
  url: "/locations";
};

export type CreateLocationResponses = {
  /**
   * Success
   */
  200: Location;
};

export type CreateLocationResponse =
  CreateLocationResponses[keyof CreateLocationResponses];

export type DeleteLocationByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/locations/{id}";
};

export type DeleteLocationByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteLocationByIdResponse =
  DeleteLocationByIdResponses[keyof DeleteLocationByIdResponses];

export type GetLocationByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/locations/{id}";
};

export type GetLocationByIdResponses = {
  /**
   * Success
   */
  200: Location;
};

export type GetLocationByIdResponse =
  GetLocationByIdResponses[keyof GetLocationByIdResponses];

export type UpdateLocationByIdData = {
  body: LocationUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/locations/{id}";
};

export type UpdateLocationByIdResponses = {
  /**
   * Success
   */
  200: Location;
};

export type UpdateLocationByIdResponse =
  UpdateLocationByIdResponses[keyof UpdateLocationByIdResponses];

export type ListProgramsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/programs";
};

export type ListProgramsResponses = {
  /**
   * Success
   */
  200: Array<Program>;
};

export type ListProgramsResponse =
  ListProgramsResponses[keyof ListProgramsResponses];

export type CreateProgramData = {
  body: ProgramCreationRequest;
  path?: never;
  query?: never;
  url: "/programs";
};

export type CreateProgramResponses = {
  /**
   * Success
   */
  200: Program;
};

export type CreateProgramResponse =
  CreateProgramResponses[keyof CreateProgramResponses];

export type DeleteProgramByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/programs/{id}";
};

export type DeleteProgramByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteProgramByIdResponse =
  DeleteProgramByIdResponses[keyof DeleteProgramByIdResponses];

export type GetProgramByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/programs/{id}";
};

export type GetProgramByIdResponses = {
  /**
   * Success
   */
  200: Program;
};

export type GetProgramByIdResponse =
  GetProgramByIdResponses[keyof GetProgramByIdResponses];

export type UpdateProgramByIdData = {
  body: ProgramUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/programs/{id}";
};

export type UpdateProgramByIdResponses = {
  /**
   * Success
   */
  200: Program;
};

export type UpdateProgramByIdResponse =
  UpdateProgramByIdResponses[keyof UpdateProgramByIdResponses];

export type ListActivitiesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/activities";
};

export type ListActivitiesResponses = {
  /**
   * Success
   */
  200: Array<Activity>;
};

export type ListActivitiesResponse =
  ListActivitiesResponses[keyof ListActivitiesResponses];

export type CreateActivityData = {
  body: ActivityCreationRequest;
  path?: never;
  query?: never;
  url: "/activities";
};

export type CreateActivityResponses = {
  /**
   * Success
   */
  200: Activity;
};

export type CreateActivityResponse =
  CreateActivityResponses[keyof CreateActivityResponses];

export type DeleteActivityByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/activities/{id}";
};

export type DeleteActivityByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteActivityByIdResponse =
  DeleteActivityByIdResponses[keyof DeleteActivityByIdResponses];

export type GetActivityByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/activities/{id}";
};

export type GetActivityByIdResponses = {
  /**
   * Success
   */
  200: Activity;
};

export type GetActivityByIdResponse =
  GetActivityByIdResponses[keyof GetActivityByIdResponses];

export type UpdateActivityByIdData = {
  body: ActivityUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/activities/{id}";
};

export type UpdateActivityByIdResponses = {
  /**
   * Success
   */
  200: Activity;
};

export type UpdateActivityByIdResponse =
  UpdateActivityByIdResponses[keyof UpdateActivityByIdResponses];

export type ListColorsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/colors";
};

export type ListColorsResponses = {
  /**
   * Success
   */
  200: Array<Color>;
};

export type ListColorsResponse = ListColorsResponses[keyof ListColorsResponses];

export type CreateColorData = {
  body: ColorCreationRequest;
  path?: never;
  query?: never;
  url: "/colors";
};

export type CreateColorResponses = {
  /**
   * Success
   */
  200: Color;
};

export type CreateColorResponse =
  CreateColorResponses[keyof CreateColorResponses];

export type DeleteColorByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/colors/{id}";
};

export type DeleteColorByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteColorByIdResponse =
  DeleteColorByIdResponses[keyof DeleteColorByIdResponses];

export type GetColorByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/colors/{id}";
};

export type GetColorByIdResponses = {
  /**
   * Success
   */
  200: Color;
};

export type GetColorByIdResponse =
  GetColorByIdResponses[keyof GetColorByIdResponses];

export type UpdateColorByIdData = {
  body: ColorUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/colors/{id}";
};

export type UpdateColorByIdResponses = {
  /**
   * Success
   */
  200: Color;
};

export type UpdateColorByIdResponse =
  UpdateColorByIdResponses[keyof UpdateColorByIdResponses];

export type ListRolesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/roles";
};

export type ListRolesResponses = {
  /**
   * Success
   */
  200: Array<Role>;
};

export type ListRolesResponse = ListRolesResponses[keyof ListRolesResponses];

export type CreateRoleData = {
  body: RoleCreationRequest;
  path?: never;
  query?: never;
  url: "/roles";
};

export type CreateRoleResponses = {
  /**
   * Success
   */
  200: Role;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/roles/{id}";
};

export type DeleteRoleByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteRoleByIdResponse =
  DeleteRoleByIdResponses[keyof DeleteRoleByIdResponses];

export type GetRoleByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/roles/{id}";
};

export type GetRoleByIdResponses = {
  /**
   * Success
   */
  200: Role;
};

export type GetRoleByIdResponse =
  GetRoleByIdResponses[keyof GetRoleByIdResponses];

export type UpdateRoleByIdData = {
  body: RoleUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/roles/{id}";
};

export type UpdateRoleByIdResponses = {
  /**
   * Success
   */
  200: Role;
};

export type UpdateRoleByIdResponse =
  UpdateRoleByIdResponses[keyof UpdateRoleByIdResponses];

export type ListCertificationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/certifications";
};

export type ListCertificationsResponses = {
  /**
   * Success
   */
  200: Array<Certification>;
};

export type ListCertificationsResponse =
  ListCertificationsResponses[keyof ListCertificationsResponses];

export type CreateCertificationData = {
  body: CertificationCreationRequest;
  path?: never;
  query?: never;
  url: "/certifications";
};

export type CreateCertificationResponses = {
  /**
   * Success
   */
  200: Certification;
};

export type CreateCertificationResponse =
  CreateCertificationResponses[keyof CreateCertificationResponses];

export type DeleteCertificationByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/certifications/{id}";
};

export type DeleteCertificationByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteCertificationByIdResponse =
  DeleteCertificationByIdResponses[keyof DeleteCertificationByIdResponses];

export type GetCertificationByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/certifications/{id}";
};

export type GetCertificationByIdResponses = {
  /**
   * Success
   */
  200: Certification;
};

export type GetCertificationByIdResponse =
  GetCertificationByIdResponses[keyof GetCertificationByIdResponses];

export type UpdateCertificationByIdData = {
  body: CertificationUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/certifications/{id}";
};

export type UpdateCertificationByIdResponses = {
  /**
   * Success
   */
  200: Certification;
};

export type UpdateCertificationByIdResponse =
  UpdateCertificationByIdResponses[keyof UpdateCertificationByIdResponses];

export type ListHousingRoomsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/housing-rooms";
};

export type ListHousingRoomsResponses = {
  /**
   * Success
   */
  200: Array<HousingRoom>;
};

export type ListHousingRoomsResponse =
  ListHousingRoomsResponses[keyof ListHousingRoomsResponses];

export type CreateHousingRoomData = {
  body: HousingRoomCreationRequest;
  path?: never;
  query?: never;
  url: "/housing-rooms";
};

export type CreateHousingRoomResponses = {
  /**
   * Success
   */
  200: HousingRoom;
};

export type CreateHousingRoomResponse =
  CreateHousingRoomResponses[keyof CreateHousingRoomResponses];

export type DeleteHousingRoomByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/housing-rooms/{id}";
};

export type DeleteHousingRoomByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteHousingRoomByIdResponse =
  DeleteHousingRoomByIdResponses[keyof DeleteHousingRoomByIdResponses];

export type GetHousingRoomByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/housing-rooms/{id}";
};

export type GetHousingRoomByIdResponses = {
  /**
   * Success
   */
  200: HousingRoom;
};

export type GetHousingRoomByIdResponse =
  GetHousingRoomByIdResponses[keyof GetHousingRoomByIdResponses];

export type UpdateHousingRoomByIdData = {
  body: HousingRoomUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/housing-rooms/{id}";
};

export type UpdateHousingRoomByIdResponses = {
  /**
   * Success
   */
  200: HousingRoom;
};

export type UpdateHousingRoomByIdResponse =
  UpdateHousingRoomByIdResponses[keyof UpdateHousingRoomByIdResponses];

export type ListGroupsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/groups";
};

export type ListGroupsResponses = {
  /**
   * Success
   */
  200: Array<Group>;
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type CreateGroupData = {
  body: GroupCreationRequest;
  path?: never;
  query?: never;
  url: "/groups";
};

export type CreateGroupResponses = {
  /**
   * Success
   */
  200: Group;
};

export type CreateGroupResponse =
  CreateGroupResponses[keyof CreateGroupResponses];

export type DeleteGroupByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/groups/{id}";
};

export type DeleteGroupByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteGroupByIdResponse =
  DeleteGroupByIdResponses[keyof DeleteGroupByIdResponses];

export type GetGroupByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/groups/{id}";
};

export type GetGroupByIdResponses = {
  /**
   * Success
   */
  200: Group;
};

export type GetGroupByIdResponse =
  GetGroupByIdResponses[keyof GetGroupByIdResponses];

export type UpdateGroupByIdData = {
  body: GroupUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/groups/{id}";
};

export type UpdateGroupByIdResponses = {
  /**
   * Success
   */
  200: Group;
};

export type UpdateGroupByIdResponse =
  UpdateGroupByIdResponses[keyof UpdateGroupByIdResponses];

export type ListEventsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/events";
};

export type ListEventsResponses = {
  /**
   * Success
   */
  200: Array<Event>;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type CreateEventData = {
  body: EventCreationRequest;
  path?: never;
  query?: never;
  url: "/events";
};

export type CreateEventResponses = {
  /**
   * Success
   */
  200: Event;
};

export type CreateEventResponse =
  CreateEventResponses[keyof CreateEventResponses];

export type DeleteEventByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/events/{id}";
};

export type DeleteEventByIdResponses = {
  /**
   * Deleted
   */
  204: void;
};

export type DeleteEventByIdResponse =
  DeleteEventByIdResponses[keyof DeleteEventByIdResponses];

export type GetEventByIdData = {
  body?: never;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/events/{id}";
};

export type GetEventByIdResponses = {
  /**
   * Success
   */
  200: Event;
};

export type GetEventByIdResponse =
  GetEventByIdResponses[keyof GetEventByIdResponses];

export type UpdateEventByIdData = {
  body: EventUpdateRequest;
  path: {
    /**
     * Resource ID
     */
    id: string;
  };
  query?: never;
  url: "/events/{id}";
};

export type UpdateEventByIdResponses = {
  /**
   * Success
   */
  200: Event;
};

export type UpdateEventByIdResponse =
  UpdateEventByIdResponses[keyof UpdateEventByIdResponses];
